networks:
  spysat:
services:

  spysat_redis:
    container_name: spysat_redis
    image: redis:latest
    restart: always
    hostname: spysat_redis
    command: redis-server --save 20 1 --dir /data --dbfilename dump.rdb --requirepass SpySat!redis!password
    ports:
      - '6379:6379'
    volumes:
      - redis-data:/data
    networks:
      - spysat

  spysat_mysql:
    container_name: spysat_mysql
    image: mysql:latest
    environment:
      MYSQL_ROOT_PASSWORD: password
      MYSQL_DATABASE: supertokens           # Create the supertokens database
    ports:
      - 8080:3306                           # Expose MySQL on port 3307 (host)
    networks:
      - spysat
    volumes:
      - mysql_db_data:/var/lib/mysql        # Persistent storage for MySQL
    restart: unless-stopped      # Ensure container restarts if it fails

  supertokens:
    container_name: supertokens
    image: registry.supertokens.io/supertokens/supertokens-mysql:latest
    ports:
      - 3567:3567  # Expose Supertokens API on port 3567
    environment:
      MYSQL_USER: root                  # MySQL username
      MYSQL_PASSWORD: password              # MySQL password
      MYSQL_HOST: spysat_mysql              # MySQL host (service name from Docker network)
      MYSQL_PORT: 3306                      # MySQL port inside the Docker network
      MYSQL_DATABASE_NAME: supertokens      # MySQL database name
    depends_on:
      - spysat_mysql                        # Ensure MySQL container starts before Supertokens
    networks:
      - spysat
    restart: unless-stopped            # Ensure container restarts if it fails

  satellite:
    container_name: satellite
    depends_on:
      - spysat_redis
    networks:
      - spysat
    build: ./Satellite # path to my docker file
    ports:
      - "3001:3000" # host port : container port
    expose:
      - "3001:3000"

  user:
    container_name: user
    depends_on:
      - spysat_mysql
      - supertokens
    networks:
      - spysat
    build: ./User # path to my docker file
    ports:
      - "3030:3030" # host port : container port
    expose:
      - "3030:3030"


  # prometheus:
  #   image:  prom/prometheus #bitnami/prometheus #might work just fine but if used the bitnami might want to use it too
  #   ports:
  #     - 9090:9090
  #   depends_on:
  #     - game_api1
  #     - game_api2
  #     - game_api3
  #   volumes:
  #     - ./Prometheus:/etc/prometheus



  # grafana:



volumes:
  redis-data:
  mysql_db_data: {}